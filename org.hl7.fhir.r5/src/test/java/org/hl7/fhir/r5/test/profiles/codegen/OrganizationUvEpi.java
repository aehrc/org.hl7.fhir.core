package org.hl7.fhir.r5.test.profiles.codegen;

import java.util.List;
import java.util.ArrayList;
import javax.annotation.Nullable;
import java.util.Date;


import org.hl7.fhir.r5.context.IWorkerContext;
import org.hl7.fhir.r5.model.*;
import org.hl7.fhir.r5.profilemodel.PEBuilder;
import org.hl7.fhir.r5.profilemodel.PEInstance;
import org.hl7.fhir.r5.profilemodel.PEBuilder.PEElementPropertiesPolicy;
import org.hl7.fhir.r5.profilemodel.gen.PEGeneratedBase;
import org.hl7.fhir.r5.profilemodel.gen.Min;
import org.hl7.fhir.r5.profilemodel.gen.Max;
import org.hl7.fhir.r5.profilemodel.gen.Label;
import org.hl7.fhir.r5.profilemodel.gen.Doco;
import org.hl7.fhir.r5.profilemodel.gen.BindingStrength;
import org.hl7.fhir.r5.profilemodel.gen.ValueSet;
import org.hl7.fhir.r5.profilemodel.gen.MustSupport;
import org.hl7.fhir.r5.profilemodel.gen.Definition;


// Generated by the HAPI Java Profile Generator, 5/11/24, 6:00 pm

/**
 * A formally or informally recognized grouping of people or organizations formed 
 * for the purpose of achieving some form of collective action.  Includes 
 * companies, institutions, corporations, departments, community groups, healthcare 
 * practice groups, payer/insurer, etc.
 *
 */
public class OrganizationUvEpi extends PEGeneratedBase {

  public static final String CANONICAL_URL = "http://hl7.org/fhir/uv/emedicinal-product-info/StructureDefinition/Organization-uv-epi|1.0.0";

  @Min("0") @Max("1") @Doco("")
  private String id;  // 

  @Min("0") @Max("*") @Doco("Additional content defined by implementations")
  @Definition("May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.")
  private List<Extension> extensions = new ArrayList<>();  // Additional content defined by implementations

  @Min("0") @Max("*") @Doco("Extensions that cannot be ignored")
  @Definition("May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).")
  private List<Extension> modifierExtensions = new ArrayList<>();  // Extensions that cannot be ignored

  @Min("1") @Max("*") @Doco("Identifies this organization  across multiple systems")
  @Definition("Identifier for the organization that is used to identify the organization across multiple disparate systems.")
  private List<Identifier> identifiers = new ArrayList<>();// @NotNull  // Identifies this organization  across multiple systems

  @Min("0") @Max("1") @Doco("Organization's legal name")
  @Definition("A name associated with the organization.")
  private String name;  // Organization's legal name

  @Min("0") @Max("*") @Doco("Official contact details for the Organization")
  @Definition("The contact details of communication devices available relevant to the specific Organization. This can include addresses, phone numbers, fax numbers, mobile numbers, email addresses and web sites.")
  private List<ExtendedContactDetail> contacts = new ArrayList<>();  // Official contact details for the Organization

  @Min("0") @Max("1") @Doco("The organization of which this organization forms a part")
  @Definition("The organization of which this organization forms a part.")
  private Reference partOf;  // The organization of which this organization forms a part

  @Min("0") @Max("*") @Doco("Technical endpoints providing access to services operated for the organization")
  @Definition("Technical endpoints providing access to services operated for the organization.")
  private List<Reference> endpoints = new ArrayList<>();  // Technical endpoints providing access to services operated for the organization

  @Min("0") @Max("*") @Doco("Qualifications, certifications, accreditations, licenses, training, etc. pertaining to the provision of care")
  @Definition("The official certifications, accreditations, training, designations and licenses that authorize and/or otherwise endorse the provision of care by the organization.\r\rFor example, an approval to provide a type of services issued by a certifying body (such as the US Joint Commission) to an organization.")
  private List<BackboneElement> qualifications = new ArrayList<>();  // Qualifications, certifications, accreditations, licenses, training, etc. pertaining to the provision of care


  /**
   * Parameter-less constructor.
   *
   */
  public OrganizationUvEpi() {
  }

  /**
   * Construct an instance of the object, and fill out all the fixed values 
   *
   */
  public OrganizationUvEpi(IWorkerContext context) {
    workerContext = context;
    PEBuilder builder = new PEBuilder(context, PEElementPropertiesPolicy.EXTENSION, true);
    PEInstance src = builder.buildPEInstance(CANONICAL_URL, builder.createResource(CANONICAL_URL, false));
    load(src);
  }

  /**
   * Populate an instance of the object based on this source object 
   *
   */
  public static OrganizationUvEpi fromSource(IWorkerContext context, Organization source) {
    OrganizationUvEpi theThing = new OrganizationUvEpi();
    theThing.workerContext = context;
    PEBuilder builder = new PEBuilder(context, PEElementPropertiesPolicy.EXTENSION, true);
    PEInstance src = builder.buildPEInstance(CANONICAL_URL, source);
    theThing.load(src);
    return theThing;
  }


  public void load(PEInstance src) {
    clear();
    if (src.hasChild("id")) {
      id = ((IdType) src.child("id").asDataType()).getValue();
    }
    for (PEInstance item : src.children("extension")) {
      extensions.add((Extension) item.asDataType());
    }
    for (PEInstance item : src.children("modifierExtension")) {
      modifierExtensions.add((Extension) item.asDataType());
    }
    for (PEInstance item : src.children("identifier")) {
      identifiers.add((Identifier) item.asDataType());
    }
    if (src.hasChild("name")) {
      name = ((StringType) src.child("name").asDataType()).getValue();
    }
    for (PEInstance item : src.children("contact")) {
      contacts.add((ExtendedContactDetail) item.asDataType());
    }
    if (src.hasChild("partOf")) {
      partOf = (Reference) src.child("partOf").asDataType();
    }
    for (PEInstance item : src.children("endpoint")) {
      endpoints.add((Reference) item.asDataType());
    }
    for (PEInstance item : src.children("qualification")) {
      qualifications.add((BackboneElement) item.asElement());
    }

  }

  /**
   * Build a instance of the underlying object based on this wrapping object 
   *
   */
  public Organization build(IWorkerContext context) {
    workerContext = context;
    return build();
  }

  /**
   * Build a instance of the underlying object based on this wrapping object 
   *
   */
  public Organization build() {
    Organization theThing = new Organization();
    PEBuilder builder = new PEBuilder(workerContext, PEElementPropertiesPolicy.EXTENSION, true);
    PEInstance tgt = builder.buildPEInstance(CANONICAL_URL, theThing);
    save(tgt, false);
    return theThing;
  }

  /**
   * Save this profile class into an existing resource (overwriting anything that 
   * exists in the profile) 
   *
   */
  public void save(IWorkerContext context, Organization dest, boolean nulls) {
    workerContext = context;
    PEBuilder builder = new PEBuilder(context, PEElementPropertiesPolicy.EXTENSION, true);
    PEInstance tgt = builder.buildPEInstance(CANONICAL_URL, dest);
    save(tgt, nulls);
  }

  public void save(PEInstance tgt, boolean nulls) {
    tgt.clear("id");
    if (id != null) {
      tgt.makeChild("id").data().setProperty("value", new IdType(id));
    }
    tgt.clear("extension");
    for (Extension item : extensions) {
      tgt.addChild("extension", item);
    }
    tgt.clear("modifierExtension");
    for (Extension item : modifierExtensions) {
      tgt.addChild("modifierExtension", item);
    }
    tgt.clear("identifier");
    for (Identifier item : identifiers) {
      tgt.addChild("identifier", item);
    }
    tgt.clear("name");
    if (name != null) {
      tgt.makeChild("name").data().setProperty("value", new StringType(name));
    }
    tgt.clear("contact");
    for (ExtendedContactDetail item : contacts) {
      tgt.addChild("contact", item);
    }
    tgt.clear("partOf");
    if (partOf != null) {
      tgt.addChild("partOf", partOf);
    }
    tgt.clear("endpoint");
    for (Reference item : endpoints) {
      tgt.addChild("endpoint", item);
    }
    tgt.clear("qualification");
    for (BackboneElement item : qualifications) {
      tgt.addChild("qualification", item);
    }

  }

  public String getId() {
    return id;
  }

  public OrganizationUvEpi setId(String value) {
    this.id = value;
    return this;
  }

  public boolean hasId() {
    return id != null;
  }

  /**
   * May be used to represent additional information that is not part of the basic 
   * definition of the resource. To make the use of extensions safe and managable, 
   * there is a strict set of governance applied to the definition and use of 
   * extensions. Though any implementer can define an extension, there is a set of 
   * requirements that SHALL be met as part of the definition of the extension.
   *
   */
  public List<Extension> getExtensions() {
    if (extensions == null) { extensions = new ArrayList<>(); }
    return extensions;
  }

  public boolean hasExtensions() {
    return extensions != null && !extensions.isEmpty();
  }

  public Extension addExtension() {
    Extension theThing = new Extension();
    getExtensions().add(theThing);
    return theThing;
  }

  public boolean hasExtension(Extension item) {
    return hasExtensions() && extensions.contains(item);
  }

  public void removeExtension(Extension item) {
    if (hasExtension(item)) {
      extensions.remove(item);
    }
  }


  /**
   * May be used to represent additional information that is not part of the basic 
   * definition of the resource and that modifies the understanding of the element 
   * that contains it and/or the understanding of the containing element's 
   * descendants. Usually modifier elements provide negation or qualification. To 
   * make the use of extensions safe and managable, there is a strict set of 
   * governance applied to the definition and use of extensions. Though any 
   * implementer is allowed to define an extension, there is a set of requirements 
   * that SHALL be met as part of the definition of the extension. Applications 
   * processing a resource are required to check for modifier extensions.
   *
   * 
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or 
   * DomainResource (including cannot change the meaning of modifierExtension 
   * itself).
   *
   */
  public List<Extension> getModifierExtensions() {
    if (modifierExtensions == null) { modifierExtensions = new ArrayList<>(); }
    return modifierExtensions;
  }

  public boolean hasModifierExtensions() {
    return modifierExtensions != null && !modifierExtensions.isEmpty();
  }

  public Extension addModifierExtension() {
    Extension theThing = new Extension();
    getModifierExtensions().add(theThing);
    return theThing;
  }

  public boolean hasModifierExtension(Extension item) {
    return hasModifierExtensions() && modifierExtensions.contains(item);
  }

  public void removeModifierExtension(Extension item) {
    if (hasModifierExtension(item)) {
      modifierExtensions.remove(item);
    }
  }


  /**
   * Identifier for the organization that is used to identify the organization across 
   * multiple disparate systems.
   *
   */
  public List<Identifier> getIdentifiers() {
    if (identifiers == null) { identifiers = new ArrayList<>(); }
    return identifiers;
  }

  public boolean hasIdentifiers() {
    return identifiers != null && !identifiers.isEmpty();
  }

  public Identifier addIdentifier() {
    Identifier theThing = new Identifier();
    getIdentifiers().add(theThing);
    return theThing;
  }

  public boolean hasIdentifier(Identifier item) {
    return hasIdentifiers() && identifiers.contains(item);
  }

  public void removeIdentifier(Identifier item) {
    if (hasIdentifier(item)) {
      identifiers.remove(item);
    }
  }


  /**
   * A name associated with the organization.
   *
   */
  public String getName() {
    return name;
  }

  public OrganizationUvEpi setName(String value) {
    this.name = value;
    return this;
  }

  public boolean hasName() {
    return name != null;
  }

  /**
   * The contact details of communication devices available relevant to the specific 
   * Organization. This can include addresses, phone numbers, fax numbers, mobile 
   * numbers, email addresses and web sites.
   *
   */
  public List<ExtendedContactDetail> getContacts() {
    if (contacts == null) { contacts = new ArrayList<>(); }
    return contacts;
  }

  public boolean hasContacts() {
    return contacts != null && !contacts.isEmpty();
  }

  public ExtendedContactDetail addContact() {
    ExtendedContactDetail theThing = new ExtendedContactDetail();
    getContacts().add(theThing);
    return theThing;
  }

  public boolean hasContact(ExtendedContactDetail item) {
    return hasContacts() && contacts.contains(item);
  }

  public void removeContact(ExtendedContactDetail item) {
    if (hasContact(item)) {
      contacts.remove(item);
    }
  }


  /**
   * The organization of which this organization forms a part.
   *
   */
  public Reference getPartOf() {
    if (partOf == null) { partOf = new Reference(); }
    return partOf;
  }

  public OrganizationUvEpi setPartOf(Reference value) {
    this.partOf = value;
    return this;
  }
  public boolean hasPartOf() {
    return partOf != null;
  }

  /**
   * Technical endpoints providing access to services operated for the organization.
   *
   */
  public List<Reference> getEndpoints() {
    if (endpoints == null) { endpoints = new ArrayList<>(); }
    return endpoints;
  }

  public boolean hasEndpoints() {
    return endpoints != null && !endpoints.isEmpty();
  }

  public Reference addEndpoint() {
    Reference theThing = new Reference();
    getEndpoints().add(theThing);
    return theThing;
  }

  public boolean hasEndpoint(Reference item) {
    return hasEndpoints() && endpoints.contains(item);
  }

  public void removeEndpoint(Reference item) {
    if (hasEndpoint(item)) {
      endpoints.remove(item);
    }
  }


  /**
   * The official certifications, accreditations, training, designations and licenses 
   * that authorize and/or otherwise endorse the provision of care by the 
   * organization.
   *
   * 
   *
   * For example, an approval to provide a type of services issued by a certifying 
   * body (such as the US Joint Commission) to an organization.
   *
   */
  public List<BackboneElement> getQualifications() {
    if (qualifications == null) { qualifications = new ArrayList<>(); }
    return qualifications;
  }

  public boolean hasQualifications() {
    return qualifications != null && !qualifications.isEmpty();
  }

  public boolean hasQualification(BackboneElement item) {
    return hasQualifications() && qualifications.contains(item);
  }

  public void removeQualification(BackboneElement item) {
    if (hasQualification(item)) {
      qualifications.remove(item);
    }
  }




  public void clear() {
    id = null;
    extensions.clear();
    modifierExtensions.clear();
    identifiers.clear();
    name = null;
    contacts.clear();
    partOf = null;
    endpoints.clear();
    qualifications.clear();

  }

}
