package org.hl7.fhir.r5.test.profiles.codegen;

import java.util.List;
import java.util.ArrayList;
import javax.annotation.Nullable;
import java.util.Date;


import org.hl7.fhir.r5.context.IWorkerContext;
import org.hl7.fhir.r5.model.*;
import org.hl7.fhir.r5.profilemodel.PEBuilder;
import org.hl7.fhir.r5.profilemodel.PEInstance;
import org.hl7.fhir.r5.profilemodel.PEBuilder.PEElementPropertiesPolicy;
import org.hl7.fhir.r5.profilemodel.gen.PEGeneratedBase;
import org.hl7.fhir.r5.profilemodel.gen.Min;
import org.hl7.fhir.r5.profilemodel.gen.Max;
import org.hl7.fhir.r5.profilemodel.gen.Label;
import org.hl7.fhir.r5.profilemodel.gen.Doco;
import org.hl7.fhir.r5.profilemodel.gen.BindingStrength;
import org.hl7.fhir.r5.profilemodel.gen.ValueSet;
import org.hl7.fhir.r5.profilemodel.gen.MustSupport;
import org.hl7.fhir.r5.profilemodel.gen.Definition;


// Generated by the HAPI Java Profile Generator, 5/11/24, 6:00 pm

/**
 * A person who is directly or indirectly involved in the provisioning of 
 * healthcare.
 *
 */
public class DkCorePractitioner extends PEGeneratedBase {

  public static final String CANONICAL_URL = "http://hl7.dk/fhir/core/StructureDefinition/dk-core-practitioner|3.2.0";

  @Min("0") @Max("1") @Doco("")
  private String id;  // 

  @Min("0") @Max("*") @Doco("Additional content defined by implementations")
  @Definition("May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.")
  private List<Extension> extensions = new ArrayList<>();  // Additional content defined by implementations

  @Min("0") @Max("*") @Doco("Extensions that cannot be ignored")
  @Definition("May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).")
  private List<Extension> modifierExtensions = new ArrayList<>();  // Extensions that cannot be ignored

  @Min("0") @Max("*") @Doco("An identifier for the person as this agent")
  @Definition("An identifier that applies to this person in this role.")
  private List<Identifier> identifiers = new ArrayList<>();  // An identifier for the person as this agent

  @Min("0") @Max("*") @Doco("A contact detail for the practitioner (that apply to all roles)")
  @Definition("A contact detail for the practitioner, e.g. a telephone number or an email address.")
  private List<ContactPoint> telecoms = new ArrayList<>();  // A contact detail for the practitioner (that apply to all roles)

  @Min("0") @Max("*") @Doco("Image of the person")
  @Definition("Image of the person.")
  private List<Attachment> photos = new ArrayList<>();  // Image of the person

  @Min("0") @Max("*") @Doco("Certification, licenses, or training pertaining to the provision of care")
  @Definition("The official certifications, training, and licenses that authorize or otherwise pertain to the provision of care by the practitioner.  For example, a medical license issued by a medical board authorizing the practitioner to practice medicine within a certian locality.")
  private List<BackboneElement> qualifications = new ArrayList<>();  // Certification, licenses, or training pertaining to the provision of care

  @Min("0") @Max("1") @Doco("Certification, licenses, or training pertaining to the provision of care")
  @Definition("The official certifications, training, and licenses that authorize or otherwise pertain to the provision of care by the practitioner.  For example, a medical license issued by a medical board authorizing the practitioner to practice medicine within a certian locality.")
  private BackboneElement officialHealthAuthorization;  // Certification, licenses, or training pertaining to the provision of care


  /**
   * Parameter-less constructor.
   *
   */
  public DkCorePractitioner() {
  }

  /**
   * Construct an instance of the object, and fill out all the fixed values 
   *
   */
  public DkCorePractitioner(IWorkerContext context) {
    workerContext = context;
    PEBuilder builder = new PEBuilder(context, PEElementPropertiesPolicy.EXTENSION, true);
    PEInstance src = builder.buildPEInstance(CANONICAL_URL, builder.createResource(CANONICAL_URL, false));
    load(src);
  }

  /**
   * Populate an instance of the object based on this source object 
   *
   */
  public static DkCorePractitioner fromSource(IWorkerContext context, Practitioner source) {
    DkCorePractitioner theThing = new DkCorePractitioner();
    theThing.workerContext = context;
    PEBuilder builder = new PEBuilder(context, PEElementPropertiesPolicy.EXTENSION, true);
    PEInstance src = builder.buildPEInstance(CANONICAL_URL, source);
    theThing.load(src);
    return theThing;
  }


  public void load(PEInstance src) {
    clear();
    if (src.hasChild("id")) {
      id = ((IdType) src.child("id").asDataType()).getValue();
    }
    for (PEInstance item : src.children("extension")) {
      extensions.add((Extension) item.asDataType());
    }
    for (PEInstance item : src.children("modifierExtension")) {
      modifierExtensions.add((Extension) item.asDataType());
    }
    for (PEInstance item : src.children("identifier")) {
      identifiers.add((Identifier) item.asDataType());
    }
    for (PEInstance item : src.children("telecom")) {
      telecoms.add((ContactPoint) item.asDataType());
    }
    for (PEInstance item : src.children("photo")) {
      photos.add((Attachment) item.asDataType());
    }
    for (PEInstance item : src.children("qualification")) {
      qualifications.add((BackboneElement) item.asElement());
    }
    if (src.hasChild("officialHealthAuthorization")) {
      officialHealthAuthorization = (BackboneElement) src.child("officialHealthAuthorization").asElement();
    }

  }

  /**
   * Build a instance of the underlying object based on this wrapping object 
   *
   */
  public Practitioner build(IWorkerContext context) {
    workerContext = context;
    return build();
  }

  /**
   * Build a instance of the underlying object based on this wrapping object 
   *
   */
  public Practitioner build() {
    Practitioner theThing = new Practitioner();
    PEBuilder builder = new PEBuilder(workerContext, PEElementPropertiesPolicy.EXTENSION, true);
    PEInstance tgt = builder.buildPEInstance(CANONICAL_URL, theThing);
    save(tgt, false);
    return theThing;
  }

  /**
   * Save this profile class into an existing resource (overwriting anything that 
   * exists in the profile) 
   *
   */
  public void save(IWorkerContext context, Practitioner dest, boolean nulls) {
    workerContext = context;
    PEBuilder builder = new PEBuilder(context, PEElementPropertiesPolicy.EXTENSION, true);
    PEInstance tgt = builder.buildPEInstance(CANONICAL_URL, dest);
    save(tgt, nulls);
  }

  public void save(PEInstance tgt, boolean nulls) {
    tgt.clear("id");
    if (id != null) {
      tgt.makeChild("id").data().setProperty("value", new IdType(id));
    }
    tgt.clear("extension");
    for (Extension item : extensions) {
      tgt.addChild("extension", item);
    }
    tgt.clear("modifierExtension");
    for (Extension item : modifierExtensions) {
      tgt.addChild("modifierExtension", item);
    }
    tgt.clear("identifier");
    for (Identifier item : identifiers) {
      tgt.addChild("identifier", item);
    }
    tgt.clear("telecom");
    for (ContactPoint item : telecoms) {
      tgt.addChild("telecom", item);
    }
    tgt.clear("photo");
    for (Attachment item : photos) {
      tgt.addChild("photo", item);
    }
    tgt.clear("qualification");
    for (BackboneElement item : qualifications) {
      tgt.addChild("qualification", item);
    }
    tgt.clear("officialHealthAuthorization");
    if (officialHealthAuthorization != null) {
      tgt.addChild("officialHealthAuthorization", officialHealthAuthorization);
    }

  }

  public String getId() {
    return id;
  }

  public DkCorePractitioner setId(String value) {
    this.id = value;
    return this;
  }

  public boolean hasId() {
    return id != null;
  }

  /**
   * May be used to represent additional information that is not part of the basic 
   * definition of the resource. To make the use of extensions safe and manageable, 
   * there is a strict set of governance  applied to the definition and use of 
   * extensions. Though any implementer can define an extension, there is a set of 
   * requirements that SHALL be met as part of the definition of the extension.
   *
   */
  public List<Extension> getExtensions() {
    if (extensions == null) { extensions = new ArrayList<>(); }
    return extensions;
  }

  public boolean hasExtensions() {
    return extensions != null && !extensions.isEmpty();
  }

  public Extension addExtension() {
    Extension theThing = new Extension();
    getExtensions().add(theThing);
    return theThing;
  }

  public boolean hasExtension(Extension item) {
    return hasExtensions() && extensions.contains(item);
  }

  public void removeExtension(Extension item) {
    if (hasExtension(item)) {
      extensions.remove(item);
    }
  }


  /**
   * May be used to represent additional information that is not part of the basic 
   * definition of the resource and that modifies the understanding of the element 
   * that contains it and/or the understanding of the containing element's 
   * descendants. Usually modifier elements provide negation or qualification. To 
   * make the use of extensions safe and manageable, there is a strict set of 
   * governance applied to the definition and use of extensions. Though any 
   * implementer is allowed to define an extension, there is a set of requirements 
   * that SHALL be met as part of the definition of the extension. Applications 
   * processing a resource are required to check for modifier extensions.
   *
   * 
   *
   * Modifier extensions SHALL NOT change the meaning of any elements on Resource or 
   * DomainResource (including cannot change the meaning of modifierExtension 
   * itself).
   *
   */
  public List<Extension> getModifierExtensions() {
    if (modifierExtensions == null) { modifierExtensions = new ArrayList<>(); }
    return modifierExtensions;
  }

  public boolean hasModifierExtensions() {
    return modifierExtensions != null && !modifierExtensions.isEmpty();
  }

  public Extension addModifierExtension() {
    Extension theThing = new Extension();
    getModifierExtensions().add(theThing);
    return theThing;
  }

  public boolean hasModifierExtension(Extension item) {
    return hasModifierExtensions() && modifierExtensions.contains(item);
  }

  public void removeModifierExtension(Extension item) {
    if (hasModifierExtension(item)) {
      modifierExtensions.remove(item);
    }
  }


  /**
   * An identifier that applies to this person in this role.
   *
   */
  public List<Identifier> getIdentifiers() {
    if (identifiers == null) { identifiers = new ArrayList<>(); }
    return identifiers;
  }

  public boolean hasIdentifiers() {
    return identifiers != null && !identifiers.isEmpty();
  }

  public Identifier addIdentifier() {
    Identifier theThing = new Identifier();
    getIdentifiers().add(theThing);
    return theThing;
  }

  public boolean hasIdentifier(Identifier item) {
    return hasIdentifiers() && identifiers.contains(item);
  }

  public void removeIdentifier(Identifier item) {
    if (hasIdentifier(item)) {
      identifiers.remove(item);
    }
  }


  /**
   * A contact detail for the practitioner, e.g. a telephone number or an email 
   * address.
   *
   */
  public List<ContactPoint> getTelecoms() {
    if (telecoms == null) { telecoms = new ArrayList<>(); }
    return telecoms;
  }

  public boolean hasTelecoms() {
    return telecoms != null && !telecoms.isEmpty();
  }

  public ContactPoint addTelecom() {
    ContactPoint theThing = new ContactPoint();
    getTelecoms().add(theThing);
    return theThing;
  }

  public boolean hasTelecom(ContactPoint item) {
    return hasTelecoms() && telecoms.contains(item);
  }

  public void removeTelecom(ContactPoint item) {
    if (hasTelecom(item)) {
      telecoms.remove(item);
    }
  }


  /**
   * Image of the person.
   *
   */
  public List<Attachment> getPhotos() {
    if (photos == null) { photos = new ArrayList<>(); }
    return photos;
  }

  public boolean hasPhotos() {
    return photos != null && !photos.isEmpty();
  }

  public Attachment addPhoto() {
    Attachment theThing = new Attachment();
    getPhotos().add(theThing);
    return theThing;
  }

  public boolean hasPhoto(Attachment item) {
    return hasPhotos() && photos.contains(item);
  }

  public void removePhoto(Attachment item) {
    if (hasPhoto(item)) {
      photos.remove(item);
    }
  }


  /**
   * The official certifications, training, and licenses that authorize or otherwise 
   * pertain to the provision of care by the practitioner.  For example, a medical 
   * license issued by a medical board authorizing the practitioner to practice 
   * medicine within a certian locality.
   *
   */
  public List<BackboneElement> getQualifications() {
    if (qualifications == null) { qualifications = new ArrayList<>(); }
    return qualifications;
  }

  public boolean hasQualifications() {
    return qualifications != null && !qualifications.isEmpty();
  }

  public boolean hasQualification(BackboneElement item) {
    return hasQualifications() && qualifications.contains(item);
  }

  public void removeQualification(BackboneElement item) {
    if (hasQualification(item)) {
      qualifications.remove(item);
    }
  }


  /**
   * The official certifications, training, and licenses that authorize or otherwise 
   * pertain to the provision of care by the practitioner.  For example, a medical 
   * license issued by a medical board authorizing the practitioner to practice 
   * medicine within a certian locality.
   *
   */
  public @Nullable BackboneElement getOfficialHealthAuthorization() { // BackboneElement is abstract 
    return officialHealthAuthorization;
  }

  public DkCorePractitioner setOfficialHealthAuthorization(BackboneElement value) {
    this.officialHealthAuthorization = value;
    return this;
  }
  public boolean hasOfficialHealthAuthorization() {
    return officialHealthAuthorization != null;
  }



  public void clear() {
    id = null;
    extensions.clear();
    modifierExtensions.clear();
    identifiers.clear();
    telecoms.clear();
    photos.clear();
    qualifications.clear();
    officialHealthAuthorization = null;

  }

}
